{"version":3,"file":"static/js/119.8c70b713.chunk.js","mappings":"sKACA,GAAgB,QAAU,yBAAyB,aAAe,8BAA8B,KAAO,sBAAsB,aAAe,8BAA8B,OAAS,wBAAwB,QAAU,0B,6BCiBrN,EAdmB,SAACA,GAEhB,OACI,gBAAKC,UAAWC,EAAAA,KAAY,UACxB,SAAC,KAAO,CAACC,GAAE,mBAAcH,EAAMI,IAAMH,UAAW,SAAAI,GAAG,OAAIA,EAAIC,SAAWJ,EAAAA,OAAgBA,EAAAA,MAAY,UAC9F,iBAAKD,UAAWC,EAAAA,QAAe,WAC3B,gBAAKK,IAAI,YAAYC,IAAKR,EAAMS,MAC/BT,EAAMU,aCD3B,EARgB,SAACV,GACb,OACI,gBAAKC,UAAWC,EAAAA,aAAoB,SAC/BF,EAAMW,W,UCCbC,EAAa,SAACZ,GAChB,OACI,+BACI,SAAC,KAAM,CAAEa,cAAe,CAAEC,eAAgB,IAAMC,SAAU,SAACC,GAAUhB,EAAMiB,mBAAmBD,EAAOF,iBAAiB,UAClH,SAAC,KAAI,WACD,iBAAKb,UAAWC,EAAO,WACnB,0BACI,SAAC,KAAK,CAACQ,KAAK,iBAAiBQ,KAAK,OAAOC,YAAY,4CAEzD,0BACI,mBAAQD,KAAK,SAAQ,gF,2DCZ7CE,EAA0B,SAACC,GAC3B,MAAO,CACHC,OAAQD,EAAME,KAAKD,SCqBpBE,GAAmBC,E,QAAAA,KACtBC,EAAAA,EAAAA,KArBkB,SAACL,GACnB,MAAO,CACHM,YAAaN,EAAMO,WAAWC,SAC9BC,YAAaT,EAAMO,WAAWG,gBAKb,SAACC,GACtB,MAAO,CAEHf,mBAAoB,SAACH,GACjBkB,GAASC,EAAAA,EAAAA,GAAmBnB,UDRR,SAACoB,GAAe,IAEtCC,EAAiB,qGAQlB,OARkB,8BAEnB,WACI,OAAKC,KAAKpC,MAAMsB,QAGT,SAACY,GAAS,UAAME,KAAKpC,SAFjB,SAAC,KAAQ,CAACG,GAAM,eAI9B,EARkB,CAASkC,EAAAA,WAahC,OAFqCX,EAAAA,EAAAA,IAAQN,EAARM,CAAiCS,KCGhDV,EFFH,SAACzB,GAEpB,IAAIsC,EAActC,EAAM2B,YAAYY,KAAI,SAAAC,GAAC,OAAI,SAAC,EAAU,CAAC9B,KAAM8B,EAAE9B,KAAiBN,GAAIoC,EAAEpC,GAAIK,IAAK+B,EAAE/B,KAAvB+B,EAAEpC,OAE1EqC,EAAczC,EAAM8B,YAAYS,KAAI,SAAAG,GAAC,OAAI,SAAC,EAAO,CAAC/B,QAAS+B,EAAE/B,QAAoBP,GAAIsC,EAAEtC,IAAZsC,EAAEtC,OAMjF,OAEI,iBAAKH,UAAWC,EAAAA,QAAe,WAC3B,gBAAKD,UAAWC,EAAAA,aAAoB,SAC/BoC,KAGL,gBAAKrC,UAAWC,EAAAA,QAAe,SAC1BuC,KAEL,SAAC7B,EAAU,CAACK,mBAdK,SAAC0B,GACtB3C,EAAMiB,mBAAmB0B,YEAjC","sources":["webpack://ract/./src/component/Dialogs/dialogs.module.css?5fc3","component/Dialogs/DialogItem/dialogItem.jsx","component/Dialogs/Massage/massage.jsx","component/Dialogs/dialogs.jsx","component/Hoc/AuthRedirect.js","component/Dialogs/dialogsContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"dialogs_dialogs__34UNk\",\"dialogs_item\":\"dialogs_dialogs_item__-4+Ux\",\"item\":\"dialogs_item__FMUqX\",\"item_massage\":\"dialogs_item_massage__3cqLk\",\"active\":\"dialogs_active__yLWrv\",\"dialogI\":\"dialogs_dialogI__rFQXX\"};","import dialog from '../dialogs.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n\r\nconst DialogItem = (props) => {\r\n\r\n    return (\r\n        <div className={dialog.item}>\r\n            <NavLink to={`/dialogs/${props.id}`} className={set => set.isActive ? dialog.active : dialog.item}>\r\n                <div className={dialog.dialogI}>\r\n                    <img alt=\"dialogImg\" src={props.img} />\r\n                    {props.name}\r\n                </div>\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import dialog from '../dialogs.module.css';\r\n\r\nconst Massage = (props) => {\r\n    return (\r\n        <div className={dialog.item_massage}>\r\n            {props.massage}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Massage;","import dialog from './dialogs.module.css';\r\nimport React from 'react';\r\nimport DialogItem from './DialogItem/dialogItem';\r\nimport Massage from './Massage/massage';\r\nimport { Formik, Form, Field, } from \"formik\";\r\n\r\nconst DialogForm = (props) => {\r\n    return (\r\n        <>\r\n            <Formik  initialValues={{ newTextMassage: \"\" }} onSubmit={(values)=>{props.onSendClickMassage(values.newTextMassage)}}>\r\n                <Form>\r\n                    <div className={dialog}>\r\n                        <div>\r\n                            <Field name=\"newTextMassage\" type=\"text\" placeholder='Напиши'/>\r\n                        </div>\r\n                        <div>\r\n                            <button type=\"sumbit\" >Отправить</button>\r\n                        </div>\r\n                    </div>\r\n                </Form>\r\n            </Formik>\r\n        </>\r\n    )\r\n}\r\n\r\nexport const Dialogs = (props) => {\r\n\r\n    let DialogsName = props.dialogsName.map(d => <DialogItem name={d.name} key={d.id} id={d.id} img={d.img} />);\r\n\r\n    let MassageText = props.massageText.map(m => <Massage massage={m.massage} key={m.id} id={m.id} />);\r\n\r\n    let onSendClickMassage = (newTetxMassage) => {\r\n        props.onSendClickMassage(newTetxMassage)\r\n    }\r\n\r\n    return (\r\n\r\n        <div className={dialog.dialogs}>\r\n            <div className={dialog.dialogs_item}>\r\n                {DialogsName}\r\n            </div>\r\n\r\n            <div className={dialog.massage}>\r\n                {MassageText}\r\n            </div>\r\n            <DialogForm onSendClickMassage={onSendClickMassage}/>\r\n        </div>\r\n    )\r\n};","import {Navigate} from \"react-router-dom\"\r\nimport React from \"react\"\r\nimport { connect } from 'react-redux'\r\n\r\nlet mapStateToPropsRedirect = (state)=>{\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n  }\r\n\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n    class RedirectComponent extends React.Component {\r\n\r\n        render() {\r\n            if (!this.props.isAuth) {\r\n                return <Navigate to = {\"/login\"} />\r\n            }\r\n            return <Component { ...this.props }\r\n            />\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}","import { connect } from 'react-redux';\r\nimport { sendMassageCreator } from '../../redux/dialigsReducer.ts';\r\nimport { Dialogs } from './dialogs';\r\nimport {withAuthRedirect} from \"./../Hoc/AuthRedirect\"\r\nimport { compose } from 'redux';\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsName: state.dialogPage.userData,\r\n        massageText: state.dialogPage.massageData,\r\n    }\r\n}\r\n\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n\r\n        onSendClickMassage: (newTextMassage) => {\r\n            dispatch(sendMassageCreator(newTextMassage))\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(Dialogs)\r\n\r\n const DialogsContainer = compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n\r\nexport default DialogsContainer;"],"names":["props","className","dialog","to","id","set","isActive","alt","src","img","name","massage","DialogForm","initialValues","newTextMassage","onSubmit","values","onSendClickMassage","type","placeholder","mapStateToPropsRedirect","state","isAuth","auth","DialogsContainer","compose","connect","dialogsName","dialogPage","userData","massageText","massageData","dispatch","sendMassageCreator","Component","RedirectComponent","this","React","DialogsName","map","d","MassageText","m","newTetxMassage"],"sourceRoot":""}